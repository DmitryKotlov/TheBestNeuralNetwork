// This file was auto-generated by ML.NET Model Builder.

using Microsoft.ML;
using Microsoft.ML.Trainers.FastTree;

namespace TheBestWebInterface.ML
{
    public partial class EVLK_MPV
    {
        public const string RetrainFilePath =  @"C:\Projects\TheBestNeuralNetwork\TheBestFormatter\bin\Debug\net8.0\Resource\Result.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"Age", @"Age"),new InputOutputColumnPair(@"Diameter", @"Diameter"),new InputOutputColumnPair(@"PredostSegment", @"PredostSegment"),new InputOutputColumnPair(@"SredTretBedra", @"SredTretBedra"),new InputOutputColumnPair(@"UrovenKolena", @"UrovenKolena"),new InputOutputColumnPair(@"VerhSredTretGoleni", @"VerhSredTretGoleni"),new InputOutputColumnPair(@"Diameter2", @"Diameter2"),new InputOutputColumnPair(@"Diameter3", @"Diameter3")})      
                                    .Append(mlContext.Transforms.Conversion.ConvertType(new []{new InputOutputColumnPair(@"Varikoz", @"Varikoz"),new InputOutputColumnPair(@"Uplotnenie", @"Uplotnenie"),new InputOutputColumnPair(@"Potemnenie", @"Potemnenie"),new InputOutputColumnPair(@"ZazhivshayaYazva", @"ZazhivshayaYazva"),new InputOutputColumnPair(@"OtkritayaYazva", @"OtkritayaYazva"),new InputOutputColumnPair(@"OtekiEst", @"OtekiEst"),new InputOutputColumnPair(@"GlubokieVeniProhodimi", @"GlubokieVeniProhodimi"),new InputOutputColumnPair(@"Tromboflebit", @"Tromboflebit"),new InputOutputColumnPair(@"Boleznennost", @"Boleznennost"),new InputOutputColumnPair(@"Bedro", @"Bedro"),new InputOutputColumnPair(@"Golen", @"Golen"),new InputOutputColumnPair(@"Stopa", @"Stopa"),new InputOutputColumnPair(@"Bedro2", @"Bedro2"),new InputOutputColumnPair(@"Golen2", @"Golen2"),new InputOutputColumnPair(@"Stopa2", @"Stopa2"),new InputOutputColumnPair(@"NesostVeni", @"NesostVeni"),new InputOutputColumnPair(@"Reflux", @"Reflux"),new InputOutputColumnPair(@"Reflux2", @"Reflux2"),new InputOutputColumnPair(@"Reflux3", @"Reflux3"),new InputOutputColumnPair(@"Reflux4", @"Reflux4")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Gender",@"Age",@"Diameter",@"PredostSegment",@"SredTretBedra",@"UrovenKolena",@"VerhSredTretGoleni",@"Diameter2",@"Diameter3",@"Varikoz",@"Uplotnenie",@"Potemnenie",@"ZazhivshayaYazva",@"OtkritayaYazva",@"OtekiEst",@"GlubokieVeniProhodimi",@"Tromboflebit",@"Boleznennost",@"Bedro",@"Golen",@"Stopa",@"Bedro2",@"Golen2",@"Stopa2",@"NesostVeni",@"Reflux",@"Reflux2",@"Reflux3",@"Reflux4"}))      
                                    .Append(mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=17,NumberOfTrees=180,MaximumBinCountPerFeature=137,FeatureFraction=0.99999999,LearningRate=0.999999776672986,LabelColumnName=@"EvlkMpv",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
 }
